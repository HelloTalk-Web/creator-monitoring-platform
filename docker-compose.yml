version: '3.8'

services:
  # 后端API服务
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=${DATABASE_URL:-postgresql://postgres:postgres@postgres:5432/creator_monitoring}
      - NODE_ENV=${NODE_ENV:-production}
      - PORT=8000
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - CACHE_TTL=${CACHE_TTL:-3600}
      - SCRAPE_CREATORS_BASE_URL=${SCRAPE_CREATORS_BASE_URL:-https://api.scrapecreators.com}
      - SCRAPE_CREATORS_API_KEY=${SCRAPE_CREATORS_API_KEY}
      - FRONTEND_URL=${FRONTEND_URL:-http://localhost:3001}
      - MAX_VIDEO_URL_LENGTH=${MAX_VIDEO_URL_LENGTH:-2048}
      - DEFAULT_SCRAPE_VIDEO_LIMIT=${DEFAULT_SCRAPE_VIDEO_LIMIT:-100}
      - MAX_SCRAPE_VIDEO_LIMIT=${MAX_SCRAPE_VIDEO_LIMIT:-1000}
      - YOUTUBE_API_KEY=${YOUTUBE_API_KEY}
    depends_on:
      - postgres
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:8000/health', (res) => process.exit(res.statusCode === 200 ? 0 : 1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # 前端Web服务
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_BASE_URL=${NEXT_PUBLIC_API_BASE_URL:-http://backend:8000}
      - NODE_ENV=${NODE_ENV:-production}
      - NEXT_PUBLIC_LOG_LEVEL=${NEXT_PUBLIC_LOG_LEVEL:-info}
      - NEXT_PUBLIC_IMAGE_PROXY_ENABLED=${NEXT_PUBLIC_IMAGE_PROXY_ENABLED:-true}
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL数据库
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-creator_monitoring}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-creator_monitoring}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

# 网络配置
networks:
  app-network:
    driver: bridge

# 数据卷
volumes:
  postgres_data:
    driver: local